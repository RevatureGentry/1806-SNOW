--Write a SQL Query that contains the names of all tracks that are longer than 6 minutes
	SELECT name FROM track WHERE milliseconds > 360000;
--Write a SQL Query to find the biggest song (which takes up the most space)
	SELECT * FROM (SELECT name, bytes FROM track ORDER BY bytes DESC) WHERE ROWNUM < 2;
--Write a SQL Query that contains the titles of all albums with tracks longer than 6 minutes in them 
    SELECT album.title FROM album, track WHERE (TRACK.ALBUMID = album.ALBUMID) AND (track.milliseconds > 360000) GROUP BY album.title;
	
--Write a SQL Query that contains the albumId and number of songs in the album 
    SELECT ALBUM.ALBUMID, count(*) FROM album, track WHERE track.ALBUMID = album.ALBUMID GROUP BY album.ALBUMID ORDER BY album.ALBUMID;
	
--Write a SQL query that contains artist's names and the number of tracks they have produced (assume an artist produced a track if it appears in one of their albums)
    SELECT artist.name, ALBUM.ALBUMID, count(*) FROM album, track, artist WHERE track.ALBUMID = album.ALBUMID AND album.albumid = artist.artistid GROUP BY artist.name, ALBUM.ALBUMID;
	
--Write a SQL Query that returns the most purchased media type
    SELECT SUM(QUANTITY) FROM
    (SELECT track.name AS TrackName, track.mediatypeid, mediatype.name AS MediatypeName, SUM(quantity) AS Quantity
    FROM track, invoiceline, mediatype
    WHERE track.trackid = invoiceline.trackid AND mediatype.mediatypeid = track.mediatypeid
    GROUP BY track.name, invoiceline.quantity, track.mediatypeid, mediatype.name
    ORDER BY track.name)
    GROUP BY MediatypeName;
    /*SELECT SUM(invoiceline.quantity) 
    FROM invoiceline, track 
    WHERE track.trackid = invoiceline.trackid AND track.MEDIATYPEID = 2;*/
    
	
--Write a SQL Query showing customers not in the US
    SELECT customer.firstname || ' ' || customer.lastname as Name FROM customer WHERE country != 'USA';

--Write a SQL Query showing a unique list of billing countries on the Invoice table
    SELECT DISTINCT billingcountry FROM invoice;

--Write a SQL Query that shows the Invoice Total, Customer Name, Country, and Sales agent for all invoices and customers 
    SELECT invoice.total, customer.firstname || ' ' || customer.lastname as "Customer Name", customer.country, employee.firstname || ' ' || employee.lastname as "Sales Rep"
    FROM invoice, customer, employee
    WHERE invoice.customerid = customer.customerid
    AND customer.supportrepid = employee.employeeid;
--Write a SQL Query that shows all Tracks, but displays no IDs. Should also include the Album name, Media Type, and Genre
    SELECT track.name, album.title as "Album Title", mediatype.name as "Media Type", genre.name as "Genre"
    FROM track, album, mediatype, genre
    WHERE track.albumid = album.albumid AND track.mediatypeid = mediatype.mediatypeid AND genre.genreid = track.genreid;
--Write a SQL Query that returns the Top 40 Songs for 2013
    SELECT  * FROM (SELECT track.name, COUNT(track.name) as Quantity 
    FROM invoiceline, track
    WHERE track.TRACKID = invoiceline.trackid
    GROUP BY track.name
    ORDER BY Quantity DESC) WHERE ROWNUM <= 40;
    
--Write a SQL Query that shows which sales agent made the most in sales overall
    --SELECT employee.firstname || ' ' || employee.lastname AS Name
    --FROM employee;
    SELECT employee.firstname || ' ' || employee.lastname AS Name, TotalSales FROM
    (SELECT  supportrepid, SUM(TOTAL) AS TotalSales FROM 
    (SELECT customer.firstname, customer.SUPPORTREPID, SUM(total) AS Total
    FROM invoice, customer
    WHERE invoice.customerid = customer.customerid
    GROUP BY customer.customerid, customer.firstname, customer.supportrepid
    ORDER BY firstname), employee 
    GROUP BY supportrepid
    ORDER BY TotalSales DESC), employee
    WHERE supportrepid = employee.employeeid AND ROWNUM < 2;

--Write a SQL Query that shows the top 3 best selling artists 
    SELECT artist.name, Quantity FROM
        (SELECT track.albumid AS TrackAlbumID, SUM(Quantity) AS Quantity 
        FROM invoiceline, track
        WHERE invoiceline.trackid = track.trackid
        GROUP BY track.albumid
        ORDER BY QUANTITY DESC), album, artist
    WHERE album.albumid = TrackAlbumID AND album.artistid = artist.artistid AND ROWNUM < 4;
--Write a SQL Query that returns which albums have no Heavy Metal tracks
    SELECT /*track.name AS "Track Name",*/ album.title, genre.name AS "Genre"
    FROM track, genre, album
    WHERE genre.genreid = track.genreid AND track.albumid = album.albumid AND genre.name != 'Rock'
    GROUP BY album.title, genre.name
    ORDER BY Title;

--Write a SQL Query to find the the managers of employees supporting Brazilian customers
    SELECT employee.firstname || ' ' || employee.lastname AS Manager FROM
        (SELECT employee.reportsto AS manager_id
        FROM customer, employee
        WHERE customer.country = 'Brazil' AND customer.supportrepid = employee.employeeid), employee
    WHERE employee.employeeid = manager_id
    GROUP BY employee.firstname || ' ' || employee.lastname;